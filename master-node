# on master node

# assuming Ubuntu 18.04 LTS system.

# install docker on moster and worker nodes
sudo apt install docker.io

# enable docker service utility
sudo systemctl enable docker

# Add the Kubernetes signing key on both the nodes
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add

# If Curl is not installed on your system, you can install it through the following command as root
sudo apt install curl

# Add Xenial Kubernetes Repository on both the master and worker nodes
sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"

# Install Kubeadm
sudo apt install kubeadm

# Check the version number of Kubeadm 
kubeadm version

# for calico CNI: 192.168.0.0/16 or for starting a flannel CNI: 10.244.0.0/16
sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=192.168.0.30

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# a cluster join token will be created, copy and keep for joing the worker nodes later

# display status of nodes
kubectl get nodes

# display status of PODS
kubectl get pods --all-namespaces

# display detailed status of PODS
kubectl get -o wide pods --all-namespaces

# networking using Calico
#kubectl apply -f https://docs.projectcalico.org/v3.9/manifests/calico.yaml
kubectl apply -f https://docs.projectcalico.org/v3.0/getting-started/kubernetes/installation/hosted/kubeadm/1.7/calico.yaml

# for creating the dashboard - execute this command before starting nodes
kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml

# Enable proxy
kubectl proxy

# Create a service account for dashboard
kubectl create serviceaccount dashboard -n default

# Add cluster binding rules for ur roles on dashboard
kubectl create clusterrolebinding dashboard-admin -n default \
  --clusterrole=cluster-admin \
  --serviceaccount=default:dashboard
  
# Generate secret key to paste into dashboard
 kubectl get secret $(kubectl get serviceaccount dashboard -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode
  
# access dashboard
http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login

# Join the work nodes using the token created earlier

# for generating the token again, run in master
sudo kubeadm create --print-join-command

# on master, for deploying a NGINX App through CLI. Usually its done via YAML file






